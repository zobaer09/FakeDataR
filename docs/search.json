[{"path":"https://zobaer09.github.io/FakeDataR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Zobaer Ahmed Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/articles/getting-started.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"FakeDataR: Getting started","text":"","code":"library(FakeDataR)  # Basic fake from a data.frame fake_mtc <- generate_fake_data(mtcars, n = 200, seed = 1) validate_fake(mtcars, fake_mtc) #>    column class_original class_fake class_match na_prop_original na_prop_fake #> 1     mpg        numeric    numeric        TRUE                0            0 #> 2     cyl        numeric    numeric        TRUE                0            0 #> 3    disp        numeric    numeric        TRUE                0            0 #> 4      hp        numeric    numeric        TRUE                0            0 #> 5    drat        numeric    numeric        TRUE                0            0 #> 6      wt        numeric    numeric        TRUE                0            0 #> 7    qsec        numeric    numeric        TRUE                0            0 #> 8      vs        numeric    numeric        TRUE                0            0 #> 9      am        numeric    numeric        TRUE                0            0 #> 10   gear        numeric    numeric        TRUE                0            0 #> 11   carb        numeric    numeric        TRUE                0            0 #>    na_match blank_prop_original blank_prop_fake blank_match #> 1      TRUE                  NA              NA          NA #> 2      TRUE                  NA              NA          NA #> 3      TRUE                  NA              NA          NA #> 4      TRUE                  NA              NA          NA #> 5      TRUE                  NA              NA          NA #> 6      TRUE                  NA              NA          NA #> 7      TRUE                  NA              NA          NA #> 8      TRUE                  NA              NA          NA #> 9      TRUE                  NA              NA          NA #> 10     TRUE                  NA              NA          NA #> 11     TRUE                  NA              NA          NA #>    range_within_original #> 1                   TRUE #> 2                   TRUE #> 3                   TRUE #> 4                   TRUE #> 5                   TRUE #> 6                   TRUE #> 7                   TRUE #> 8                   TRUE #> 9                   TRUE #> 10                  TRUE #> 11                  TRUE"},{"path":"https://zobaer09.github.io/FakeDataR/articles/getting-started.html","id":"factors-characters-and-numerics","dir":"Articles","previous_headings":"","what":"Factors, characters, and numerics","title":"FakeDataR: Getting started","text":"","code":"fake_co2 <- generate_fake_data(as.data.frame(CO2), n = 200, seed = 2) validate_fake(as.data.frame(CO2), fake_co2) #>      column class_original class_fake class_match na_prop_original na_prop_fake #> 1     Plant ordered/factor     factor       FALSE                0            0 #> 2      Type         factor     factor        TRUE                0            0 #> 3 Treatment         factor     factor        TRUE                0            0 #> 4      conc        numeric    numeric        TRUE                0            0 #> 5    uptake        numeric    numeric        TRUE                0            0 #>   na_match blank_prop_original blank_prop_fake blank_match #> 1     TRUE                   0               0        TRUE #> 2     TRUE                   0               0        TRUE #> 3     TRUE                   0               0        TRUE #> 4     TRUE                  NA              NA          NA #> 5     TRUE                  NA              NA          NA #>   range_within_original #> 1                    NA #> 2                    NA #> 3                    NA #> 4                  TRUE #> 5                  TRUE fake_tg <- generate_fake_data(ToothGrowth, n = 120, seed = 3) validate_fake(ToothGrowth, fake_tg) #>   column class_original class_fake class_match na_prop_original na_prop_fake #> 1    len        numeric    numeric        TRUE                0            0 #> 2   supp         factor     factor        TRUE                0            0 #> 3   dose        numeric    numeric        TRUE                0            0 #>   na_match blank_prop_original blank_prop_fake blank_match #> 1     TRUE                  NA              NA          NA #> 2     TRUE                   0               0        TRUE #> 3     TRUE                  NA              NA          NA #>   range_within_original #> 1                  TRUE #> 2                    NA #> 3                  TRUE"},{"path":"https://zobaer09.github.io/FakeDataR/articles/getting-started.html","id":"dates-and-posixct-time-zones-preserved","dir":"Articles","previous_headings":"","what":"Dates and POSIXct (time zones preserved)","title":"FakeDataR: Getting started","text":"","code":"df_date <- data.frame(d = seq(as.Date(\"2020-01-01\"), by = \"day\", length.out = 50)) fake_date <- generate_fake_data(df_date, n = 80, seed = 4) str(fake_date$d) #>  Date[1:80], format: \"2020-01-11\" \"2020-01-03\" \"2020-01-07\" \"2020-02-13\" \"2020-01-30\" ... dt <- data.frame(   when = seq.POSIXt(as.POSIXct(\"2023-05-01 00:00:00\", tz = \"America/New_York\"),                     by = \"hour\", length.out = 200) ) fake_dt <- generate_fake_data(dt, n = 50, seed = 5) str(fake_dt$when) #>  POSIXct[1:50], format: \"2023-05-02 15:50:33\" \"2023-05-06 16:21:30\" \"2023-05-08 14:27:29\" ... range(fake_dt$when) #> [1] \"2023-05-01 02:52:55 EDT\" \"2023-05-09 00:13:36 EDT\""},{"path":"https://zobaer09.github.io/FakeDataR/articles/getting-started.html","id":"public-datasets-optional","dir":"Articles","previous_headings":"","what":"Public datasets (optional)","title":"FakeDataR: Getting started","text":"chunks run packages installed.","code":"fl <- nycflights13::flights set.seed(10) fl_small <- fl[sample.int(nrow(fl), 5000), ] fake_fl <- generate_fake_data(fl_small, n = 2000, seed = 10, numeric_mode = \"distribution\") validate_fake(fl_small, fake_fl) #>            column class_original     class_fake class_match na_prop_original #> 1            year        integer        integer        TRUE           0.0000 #> 2           month        integer        integer        TRUE           0.0000 #> 3             day        integer        integer        TRUE           0.0000 #> 4        dep_time        integer        integer        TRUE           0.0264 #> 5  sched_dep_time        integer        integer        TRUE           0.0000 #> 6       dep_delay        numeric        numeric        TRUE           0.0264 #> 7        arr_time        integer        integer        TRUE           0.0288 #> 8  sched_arr_time        integer        integer        TRUE           0.0000 #> 9       arr_delay        numeric        numeric        TRUE           0.0318 #> 10        carrier      character      character        TRUE           0.0000 #> 11         flight        integer        integer        TRUE           0.0000 #> 12        tailnum      character      character        TRUE           0.0056 #> 13         origin      character      character        TRUE           0.0000 #> 14           dest      character      character        TRUE           0.0000 #> 15       air_time        numeric        numeric        TRUE           0.0318 #> 16       distance        numeric        numeric        TRUE           0.0000 #> 17           hour        numeric        numeric        TRUE           0.0000 #> 18         minute        numeric        numeric        TRUE           0.0000 #> 19      time_hour POSIXct/POSIXt POSIXct/POSIXt        TRUE           0.0000 #>    na_prop_fake na_match blank_prop_original blank_prop_fake blank_match #> 1        1.0000    FALSE                  NA              NA          NA #> 2        0.0000     TRUE                  NA              NA          NA #> 3        0.0000     TRUE                  NA              NA          NA #> 4        0.0225     TRUE                  NA              NA          NA #> 5        0.0000     TRUE                  NA              NA          NA #> 6        0.0200     TRUE                  NA              NA          NA #> 7        0.0290     TRUE                  NA              NA          NA #> 8        0.0000     TRUE                  NA              NA          NA #> 9        0.0370     TRUE                  NA              NA          NA #> 10       0.0000     TRUE                   0               0        TRUE #> 11       0.0000     TRUE                  NA              NA          NA #> 12       0.0080     TRUE                   0               0        TRUE #> 13       0.0000     TRUE                   0               0        TRUE #> 14       0.0000     TRUE                   0               0        TRUE #> 15       0.0315     TRUE                  NA              NA          NA #> 16       0.0000     TRUE                  NA              NA          NA #> 17       0.0000     TRUE                  NA              NA          NA #> 18       0.0000     TRUE                  NA              NA          NA #> 19       0.0000     TRUE                  NA              NA          NA #>    range_within_original #> 1                  FALSE #> 2                  FALSE #> 3                  FALSE #> 4                  FALSE #> 5                  FALSE #> 6                  FALSE #> 7                  FALSE #> 8                  FALSE #> 9                  FALSE #> 10                    NA #> 11                 FALSE #> 12                    NA #> 13                    NA #> 14                    NA #> 15                 FALSE #> 16                 FALSE #> 17                 FALSE #> 18                 FALSE #> 19                  TRUE peng <- na.omit(palmerpenguins::penguins[, c(\"species\",\"island\",\"bill_length_mm\",\"sex\")]) fake_peng <- generate_fake_data(peng, n = 600, seed = 11, category_mode = \"preserve\") validate_fake(peng, fake_peng) #>           column class_original class_fake class_match na_prop_original #> 1        species         factor     factor        TRUE                0 #> 2         island         factor     factor        TRUE                0 #> 3 bill_length_mm        numeric    numeric        TRUE                0 #> 4            sex         factor     factor        TRUE                0 #>   na_prop_fake na_match blank_prop_original blank_prop_fake blank_match #> 1            0     TRUE                   0               0        TRUE #> 2            0     TRUE                   0               0        TRUE #> 3            0     TRUE                  NA              NA          NA #> 4            0     TRUE                   0               0        TRUE #>   range_within_original #> 1                    NA #> 2                    NA #> 3                  TRUE #> 4                    NA"},{"path":"https://zobaer09.github.io/FakeDataR/articles/getting-started.html","id":"gapminder-demo","dir":"Articles","previous_headings":"","what":"Gapminder demo","title":"FakeDataR: Getting started","text":"","code":"# Optional package; make the chunk robust if (requireNamespace(\"gapminder\", quietly = TRUE)) {   set.seed(21)   gm <- gapminder::gapminder   # Keep it light if you want: gm <- gm[sample.int(nrow(gm), 2000), ]    fake_gm <- generate_fake_data(     gm, n = 1500, seed = 21,     numeric_mode = \"distribution\",  # nicer numeric spread     category_mode = \"preserve\"      # keep factor levels   )    validate_fake(gm, fake_gm) } else {   message(\"gapminder not installed; skipping demo.\") } #>      column class_original class_fake class_match na_prop_original na_prop_fake #> 1   country         factor     factor        TRUE                0            0 #> 2 continent         factor     factor        TRUE                0            0 #> 3      year        integer    integer        TRUE                0            0 #> 4   lifeExp        numeric    numeric        TRUE                0            0 #> 5       pop        integer    integer        TRUE                0            0 #> 6 gdpPercap        numeric    numeric        TRUE                0            0 #>   na_match blank_prop_original blank_prop_fake blank_match #> 1     TRUE                   0               0        TRUE #> 2     TRUE                   0               0        TRUE #> 3     TRUE                  NA              NA          NA #> 4     TRUE                  NA              NA          NA #> 5     TRUE                  NA              NA          NA #> 6     TRUE                  NA              NA          NA #>   range_within_original #> 1                    NA #> 2                    NA #> 3                 FALSE #> 4                 FALSE #> 5                 FALSE #> 6                 FALSE"},{"path":"https://zobaer09.github.io/FakeDataR/articles/getting-started.html","id":"sensitive-columns-fake-vs-drop","dir":"Articles","previous_headings":"","what":"Sensitive columns: fake vs drop","title":"FakeDataR: Getting started","text":"","code":"set.seed(12) df_pii <- data.frame(   id    = 1:100,   email = sprintf(\"user%03d@corp.com\", 1:100),   phone = sprintf(\"(415) 555-%04d\", 1:100),   spend = runif(100, 10, 500) )  fake_keep <- generate_fake_data(   df_pii, n = 120,   sensitive_detect   = TRUE,   sensitive_strategy = \"fake\" ) fake_drop <- generate_fake_data(   df_pii, n = 120,   sensitive_detect   = TRUE,   sensitive_strategy = \"drop\" )  names(fake_keep)        # expect id/email/phone present but synthetic #> [1] \"id\"    \"email\" \"phone\" \"spend\" names(fake_drop)        # expect only \"spend\" #> [1] \"spend\""},{"path":"https://zobaer09.github.io/FakeDataR/articles/getting-started.html","id":"llm-bundle-data-schema-readme-optional-zip","dir":"Articles","previous_headings":"","what":"LLM bundle: data + schema + README (+ optional ZIP)","title":"FakeDataR: Getting started","text":"","code":"b1 <- llm_bundle(   data = ToothGrowth, n = 150, level = \"high\", seed = 10,   formats = c(\"csv\",\"rds\"),   path = tempdir(), filename = \"toothgrowth_fake\",   write_prompt = TRUE, zip = TRUE ) b1$schema_path #> [1] \"/tmp/RtmpjfAb4m/toothgrowth_fake_schema.json\" b1$readme_path #> [1] \"/tmp/RtmpjfAb4m/README_FOR_LLM.txt\" b1$zip_path #> [1] \"/tmp/RtmpjfAb4m/toothgrowth_fake.zip\""},{"path":"https://zobaer09.github.io/FakeDataR/articles/getting-started.html","id":"parquet-export-optional","dir":"Articles","previous_headings":"","what":"Parquet export (optional)","title":"FakeDataR: Getting started","text":"","code":"fake_air <- generate_fake_data(airquality, n = 1000, seed = 20) export_fake(fake_air, file.path(tempdir(), \"air.parquet\"))"},{"path":"https://zobaer09.github.io/FakeDataR/articles/getting-started.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"FakeDataR: Getting started","text":"","code":"a1 <- generate_fake_data(CO2, n = 123, seed = 42) a2 <- generate_fake_data(CO2, n = 123, seed = 42) identical(a1, a2) #> [1] TRUE big <- data.frame(   a = runif(2e5),   b = sample(letters, 2e5, TRUE),   c = as.Date(\"2020-01-01\") + sample.int(3000, 2e5, TRUE) ) system.time({   fake_big <- generate_fake_data(big, n = 2e5, seed = 99) }) #>    user  system elapsed  #>   0.531   0.032   0.563"},{"path":"https://zobaer09.github.io/FakeDataR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zobaer Ahmed. Author, maintainer.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ahmed Z (2025). FakeDataR: Privacy-Preserving Synthetic Data LLM Workflows. R package version 0.0.0.9000, https://zobaer09.github.io/FakeDataR/.","code":"@Manual{,   title = {FakeDataR: Privacy-Preserving Synthetic Data for LLM Workflows},   author = {Zobaer Ahmed},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://zobaer09.github.io/FakeDataR/}, }"},{"path":"https://zobaer09.github.io/FakeDataR/index.html","id":"fakedatar","dir":"","previous_headings":"","what":"Privacy-Preserving Synthetic Data for LLM Workflows","title":"Privacy-Preserving Synthetic Data for LLM Workflows","text":"FakeDataR makes safe, synthetic stand‑ins real datasets. mirrors types, factor levels, NA/blank rates, even handles sensitive columns (IDs, emails, phones) via fake drop strategies. can also generate fake tables database schema without reading rows.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Privacy-Preserving Synthetic Data for LLM Workflows","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"zobaer09/FakeDataR\")"},{"path":"https://zobaer09.github.io/FakeDataR/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Privacy-Preserving Synthetic Data for LLM Workflows","text":"Generate fake dataset matches structure real one: Validate classes basic patterns preserved: Preserve factor levels & numeric ranges (example palmerpenguins):","code":"library(FakeDataR)  fake_mtc <- generate_fake_data(mtcars, n = 200, seed = 1) head(fake_mtc) #>        mpg      cyl     disp        hp     drat       wt     qsec        vs #> 1 16.63945 5.070033 335.2440 282.43325 4.623352 3.588993 17.57882 0.2396067 #> 2 19.14491 4.874581 145.2945 314.84395 2.834732 4.191491 20.72770 0.6477649 #> 3 23.86205 6.067187 453.7102  93.73714 4.867064 3.012021 22.34145 0.9756708 #> 4 31.74288 5.075802 431.0475 264.19953 4.376889 5.247958 20.15496 0.3779988 #> 5 15.13953 4.724673 449.4281 328.11103 3.352964 1.975893 20.39140 0.4641441 #> 6 31.51216 6.074305 361.2276 327.86627 4.229320 1.665920 21.62005 0.8122963 #>           am     gear     carb #> 1 0.13853856 3.123219 7.102635 #> 2 0.04752457 3.710643 7.770379 #> 3 0.03391887 4.154076 7.068414 #> 4 0.91608902 4.070063 4.064007 #> 5 0.84020039 4.208546 2.343565 #> 6 0.17887142 3.972298 1.576061 validate_fake(mtcars, fake_mtc) #>    column class_original class_fake class_match na_prop_original na_prop_fake #> 1     mpg        numeric    numeric        TRUE                0            0 #> 2     cyl        numeric    numeric        TRUE                0            0 #> 3    disp        numeric    numeric        TRUE                0            0 #> 4      hp        numeric    numeric        TRUE                0            0 #> 5    drat        numeric    numeric        TRUE                0            0 #> 6      wt        numeric    numeric        TRUE                0            0 #> 7    qsec        numeric    numeric        TRUE                0            0 #> 8      vs        numeric    numeric        TRUE                0            0 #> 9      am        numeric    numeric        TRUE                0            0 #> 10   gear        numeric    numeric        TRUE                0            0 #> 11   carb        numeric    numeric        TRUE                0            0 #>    na_match blank_prop_original blank_prop_fake blank_match #> 1      TRUE                  NA              NA          NA #> 2      TRUE                  NA              NA          NA #> 3      TRUE                  NA              NA          NA #> 4      TRUE                  NA              NA          NA #> 5      TRUE                  NA              NA          NA #> 6      TRUE                  NA              NA          NA #> 7      TRUE                  NA              NA          NA #> 8      TRUE                  NA              NA          NA #> 9      TRUE                  NA              NA          NA #> 10     TRUE                  NA              NA          NA #> 11     TRUE                  NA              NA          NA #>    range_within_original #> 1                   TRUE #> 2                   TRUE #> 3                   TRUE #> 4                   TRUE #> 5                   TRUE #> 6                   TRUE #> 7                   TRUE #> 8                   TRUE #> 9                   TRUE #> 10                  TRUE #> 11                  TRUE if (requireNamespace(\"palmerpenguins\", quietly = TRUE)) {   peng <- na.omit(palmerpenguins::penguins[, c(\"species\",\"island\",\"bill_length_mm\",\"sex\")])   fake_peng <- generate_fake_data(peng, n = 400, seed = 11, category_mode = \"preserve\")   validate_fake(peng, fake_peng) } #>           column class_original class_fake class_match na_prop_original #> 1        species         factor     factor        TRUE                0 #> 2         island         factor     factor        TRUE                0 #> 3 bill_length_mm        numeric    numeric        TRUE                0 #> 4            sex         factor     factor        TRUE                0 #>   na_prop_fake na_match blank_prop_original blank_prop_fake blank_match #> 1            0     TRUE                   0               0        TRUE #> 2            0     TRUE                   0               0        TRUE #> 3            0     TRUE                  NA              NA          NA #> 4            0     TRUE                   0               0        TRUE #>   range_within_original #> 1                    NA #> 2                    NA #> 3                  TRUE #> 4                    NA"},{"path":"https://zobaer09.github.io/FakeDataR/index.html","id":"sensitive-columns","dir":"","previous_headings":"","what":"Sensitive columns","title":"Privacy-Preserving Synthetic Data for LLM Workflows","text":"Detect handle PII name. Use strategy \"fake\" (default) \"drop\":","code":"df <- data.frame(   id    = 1:50,   email = sprintf(\"user%03d@corp.com\", 1:50),   phone = sprintf(\"(415) 555-%04d\", 1:50),   spend = runif(50, 10, 500) )  # Keep the columns but replace values with synthetic ones fake_keep <- generate_fake_data(   df, n = 80, seed = 12,   sensitive_detect = TRUE, sensitive_strategy = \"fake\" ) intersect(df$email, fake_keep$email)  # should be character(0) #> character(0)  # Drop sensitive columns entirely fake_drop <- generate_fake_data(   df, n = 80, seed = 13,   sensitive_detect = TRUE, sensitive_strategy = \"drop\" ) names(fake_drop)  # no id/email/phone #> [1] \"spend\""},{"path":"https://zobaer09.github.io/FakeDataR/index.html","id":"from-a-database-schema-no-data-read","dir":"","previous_headings":"","what":"From a database schema (no data read)","title":"Privacy-Preserving Synthetic Data for LLM Workflows","text":"Create fake rows using schema (types, nullability, etc.). works even access underlying data.","code":"library(DBI); library(RSQLite)  con <- dbConnect(RSQLite::SQLite(), \":memory:\") dbExecute(con, \"   CREATE TABLE employees (     id INTEGER,     email TEXT,     phone TEXT,     is_active BOOLEAN,     hired_at TIMESTAMP,     salary NUMERIC,     dept TEXT   ) \")  sch  <- schema_from_db(con, \"employees\") fake <- generate_fake_from_schema(sch, n = 50, seed = 14)  str(fake$hired_at)  # POSIXct dbDisconnect(con)"},{"path":"https://zobaer09.github.io/FakeDataR/index.html","id":"exporting","dir":"","previous_headings":"","what":"Exporting","title":"Privacy-Preserving Synthetic Data for LLM Workflows","text":"Write fake data common formats (CSV, RDS, Parquet) optionally produce LLM bundle containing schema README.","code":"# CSV / RDS export_fake(fake_mtc, file.path(tempdir(), \"fake_mtc.csv\")) export_fake(fake_mtc, file.path(tempdir(), \"fake_mtc.rds\"))  # Parquet (requires the 'arrow' package) # install.packages(\"arrow\") export_fake(fake_mtc, file.path(tempdir(), \"fake_mtc.parquet\"))  # End-to-end bundle b <- llm_bundle(   mtcars, n = 200, seed = 10, level = \"high\",   formats = c(\"csv\",\"rds\"),   path = tempdir(), filename = \"mtcars_fake\",   write_prompt = TRUE, zip = TRUE ) b$zip_path"},{"path":"https://zobaer09.github.io/FakeDataR/index.html","id":"reproducibility","dir":"","previous_headings":"","what":"Reproducibility","title":"Privacy-Preserving Synthetic Data for LLM Workflows","text":"generators respect seed. Given inputs fixed package version, results reproducible:","code":"a1 <- generate_fake_data(CO2, n = 123, seed = 42) a2 <- generate_fake_data(CO2, n = 123, seed = 42) identical(a1, a2) #> [1] TRUE"},{"path":"https://zobaer09.github.io/FakeDataR/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Privacy-Preserving Synthetic Data for LLM Workflows","text":"Getting started vignette: https://zobaer09.github.io/FakeDataR/articles/getting-started.html Database workflow vignette: https://zobaer09.github.io/FakeDataR/articles/database-workflow.html Full function reference: https://zobaer09.github.io/FakeDataR/reference/","code":""},{"path":"https://zobaer09.github.io/FakeDataR/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Privacy-Preserving Synthetic Data for LLM Workflows","text":"Issues pull requests welcome! find bug feature request, please open issue GitHub.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Privacy-Preserving Synthetic Data for LLM Workflows","text":"package distributed terms license included repository (see LICENSE).","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/export_fake.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a fake dataset to disk — export_fake","title":"Save a fake dataset to disk — export_fake","text":"Save data.frame CSV, RDS, Parquet based file extension.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/export_fake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a fake dataset to disk — export_fake","text":"","code":"export_fake(x, path)"},{"path":"https://zobaer09.github.io/FakeDataR/reference/export_fake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a fake dataset to disk — export_fake","text":"x data.frame (e.g., output generate_fake_data()). path File path. Supported extensions: .csv, .rds, .parquet.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/export_fake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a fake dataset to disk — export_fake","text":"(Invisibly) path written.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Fake Data from Real Dataset Structure — generate_fake_data","title":"Generate Fake Data from Real Dataset Structure — generate_fake_data","text":"Create synthetic dataset mirrors structure key patterns existing dataset (types, factor levels, NA/blank rates). Values fake.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Fake Data from Real Dataset Structure — generate_fake_data","text":"","code":"generate_fake_data(   data,   n = 30,   category_mode = c(\"preserve\", \"generic\", \"custom\"),   numeric_mode = c(\"range\", \"distribution\"),   column_mode = c(\"keep\", \"generic\", \"custom\"),   custom_levels = NULL,   custom_names = NULL,   seed = NULL,   verbose = FALSE,   sensitive = NULL,   sensitive_detect = TRUE,   sensitive_strategy = c(\"fake\", \"drop\") )"},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Fake Data from Real Dataset Structure — generate_fake_data","text":"data data.frame-like object mirror. n Number rows generate. Default 30. category_mode handle categorical variables: \"preserve\", \"generic\", \"custom\". numeric_mode generate numeric data: \"range\" \"distribution\". column_mode Column names: \"keep\", \"generic\", \"custom\". custom_levels Named list custom levels (used category_mode=\"custom\"). custom_names Character vector custom column names (used column_mode=\"custom\"). seed Optional integer seed reproducibility. Default NULL. verbose Logical; TRUE, prints detected column metadata & sensitive columns. sensitive Character vector column names always treat sensitive; faked special generators (dropped strategy = \"drop\"). NULL, uses detection rules . sensitive_detect Logical; TRUE, detect sensitive columns name using built-regex (id/email/phone). Default TRUE. sensitive_strategy \"fake\" (default) \"drop\". \"drop\", sensitive columns removed output.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Fake Data from Real Dataset Structure — generate_fake_data","text":"data.frame fake data n rows.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_from_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate fake data from a DB schema data.frame — generate_fake_from_schema","title":"Generate fake data from a DB schema data.frame — generate_fake_from_schema","text":"Generate fake data DB schema data.frame","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_from_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate fake data from a DB schema data.frame — generate_fake_from_schema","text":"","code":"generate_fake_from_schema(sch_df, n = 30, seed = NULL)"},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_from_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate fake data from a DB schema data.frame — generate_fake_from_schema","text":"sch_df data.frame schema_from_db() n rows seed optional","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_posixct_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Fake POSIXct Column — generate_fake_posixct_column","title":"Generate a Fake POSIXct Column — generate_fake_posixct_column","text":"Generate Fake POSIXct Column","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_posixct_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Fake POSIXct Column — generate_fake_posixct_column","text":"","code":"generate_fake_posixct_column(col, n)"},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_posixct_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Fake POSIXct Column — generate_fake_posixct_column","text":"col POSIXct vector mimic. n Number rows.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_posixct_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Fake POSIXct Column — generate_fake_posixct_column","text":"POSIXct vector length n.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_with_privacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate fake data with privacy controls — generate_fake_with_privacy","title":"Generate fake data with privacy controls — generate_fake_with_privacy","text":"Generate fake data privacy controls Generate fake data using privacy preset","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_with_privacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate fake data with privacy controls — generate_fake_with_privacy","text":"","code":"generate_fake_with_privacy(   data,   n = 30,   level = c(\"low\", \"medium\", \"high\"),   seed = NULL )  generate_fake_with_privacy(   data,   n = 30,   level = c(\"low\", \"medium\", \"high\"),   seed = NULL )"},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_with_privacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate fake data with privacy controls — generate_fake_with_privacy","text":"data data.frame n rows level 'low' | 'medium' | 'high' seed optional seed sensitive Character vector column names treat sensitive sensitive_detect Logical, auto-detect common sensitive names (id/email/phone/...) sensitive_strategy One \"fake\" \"drop\"","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_fake_with_privacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate fake data with privacy controls — generate_fake_with_privacy","text":"data.frame attributes: sensitive_columns, dropped_columns, name_map","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_llm_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a copy-paste prompt for LLMs — generate_llm_prompt","title":"Create a copy-paste prompt for LLMs — generate_llm_prompt","text":"Create copy-paste prompt LLMs","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_llm_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a copy-paste prompt for LLMs — generate_llm_prompt","text":"","code":"generate_llm_prompt(   fake_path,   schema_path = NULL,   notes = NULL,   write_file = TRUE,   path = dirname(fake_path),   filename = \"README_FOR_LLM.txt\" )"},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_llm_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a copy-paste prompt for LLMs — generate_llm_prompt","text":"fake_path Path fake data file (CSV/RDS/Parquet). schema_path Optional path JSON schema. notes Optional extra notes append analyst/LLM. write_file Write README txt next files? Default TRUE. path Output directory README write_file = TRUE. filename README file name. Default \"README_FOR_LLM.txt\".","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/generate_llm_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a copy-paste prompt for LLMs — generate_llm_prompt","text":"prompt string (invisibly returns file path written).","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/grapes-or-or-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helpers — %||%","title":"Internal helpers — %||%","text":"Internal helpers","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/grapes-or-or-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helpers — %||%","text":"","code":"x %||% y"},{"path":"https://zobaer09.github.io/FakeDataR/reference/llm_bundle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a fake-data bundle for LLM workflows — llm_bundle","title":"Create a fake-data bundle for LLM workflows — llm_bundle","text":"Generates fake data, writes files (CSV/RDS/Parquet), writes scrubbed JSON schema, optionally writes README prompt single ZIP file containing everything.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/llm_bundle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a fake-data bundle for LLM workflows — llm_bundle","text":"","code":"llm_bundle(   data,   n = 30,   level = c(\"medium\", \"low\", \"high\"),   formats = c(\"csv\", \"rds\"),   path = tempdir(),   filename = \"fake_bundle\",   seed = NULL,   write_prompt = TRUE,   zip = FALSE,   prompt_filename = \"README_FOR_LLM.txt\",   zip_filename = NULL,   sensitive = NULL,   sensitive_detect = TRUE,   sensitive_strategy = c(\"fake\", \"drop\") )"},{"path":"https://zobaer09.github.io/FakeDataR/reference/llm_bundle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a fake-data bundle for LLM workflows — llm_bundle","text":"data data.frame (coercible) mirror. n Number rows fake dataset (default 30). level Privacy level: \"low\", \"medium\", \"high\". Controls stricter defaults. formats data files write: \"csv\",\"rds\",\"parquet\". path Folder write outputs. Default: tempdir(). filename Base filename (without extension). Default: \"fake_bundle\". seed Optional RNG seed reproducibility. write_prompt Write README_FOR_LLM.txt next data? Default TRUE. zip Create single zip archive containing data + schema + README? Default FALSE. prompt_filename Name README file. Default \"README_FOR_LLM.txt\". zip_filename Name zip file (path). Default \".zip\". sensitive Character vector column names treat sensitive (optional). sensitive_detect Logical, auto-detect common sensitive columns (id/email/phone). Default TRUE. sensitive_strategy \"fake\" (replace realistic fakes) \"drop\". Default \"fake\".","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/llm_bundle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a fake-data bundle for LLM workflows — llm_bundle","text":"List paths: $data_paths (named), $schema_path, $readme_path (optional), $zip_path (optional), $fake (data.frame).","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/llm_bundle_from_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Bundle from DB schema only (no row reads) — llm_bundle_from_db","title":"Bundle from DB schema only (no row reads) — llm_bundle_from_db","text":"Bundle DB schema (row reads)","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/llm_bundle_from_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bundle from DB schema only (no row reads) — llm_bundle_from_db","text":"","code":"llm_bundle_from_db(   conn,   table,   n = 30,   level = c(\"medium\", \"low\", \"high\"),   formats = c(\"csv\", \"rds\"),   path = tempdir(),   filename = \"fake_from_db\",   seed = NULL,   write_prompt = TRUE,   zip = FALSE,   zip_filename = NULL,   sensitive_strategy = c(\"fake\", \"drop\") )"},{"path":"https://zobaer09.github.io/FakeDataR/reference/llm_bundle_from_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bundle from DB schema only (no row reads) — llm_bundle_from_db","text":"conn DBI connection table table name n Number rows fake dataset (default 30). level \"low\",\"medium\",\"high\" formats data files write: \"csv\",\"rds\",\"parquet\". path Folder write outputs. Default: tempdir(). filename Base filename (without extension). Default: \"fake_bundle\". seed Optional RNG seed reproducibility. write_prompt Write README_FOR_LLM.txt next data? Default TRUE. zip Create single zip archive containing data + schema + README? Default FALSE. zip_filename Name zip file (path). Default \".zip\". sensitive_strategy \"fake\" (replace realistic fakes) \"drop\". Default \"fake\".","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/prepare_input_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Input Data: Coerce to data.frame — prepare_input_data","title":"Prepare Input Data: Coerce to data.frame — prepare_input_data","text":"Takes common tabular R object safely converts data.frame. Returns NULL error unsupported.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/prepare_input_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Input Data: Coerce to data.frame — prepare_input_data","text":"","code":"prepare_input_data(data)"},{"path":"https://zobaer09.github.io/FakeDataR/reference/prepare_input_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Input Data: Coerce to data.frame — prepare_input_data","text":"data Input object","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/prepare_input_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Input Data: Coerce to data.frame — prepare_input_data","text":"data.frame error","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/schema_from_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect table (schema-only) -> data.frame schema — schema_from_db","title":"Inspect table (schema-only) -> data.frame schema — schema_from_db","text":"Inspect table (schema-) -> data.frame schema","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/schema_from_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect table (schema-only) -> data.frame schema — schema_from_db","text":"","code":"schema_from_db(conn, table, level = c(\"medium\", \"low\", \"high\"))"},{"path":"https://zobaer09.github.io/FakeDataR/reference/schema_from_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect table (schema-only) -> data.frame schema — schema_from_db","text":"conn DBI connection table table name level \"low\",\"medium\",\"high\"","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/schema_from_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect table (schema-only) -> data.frame schema — schema_from_db","text":"data.frame columns: name, type, nullable, sensitive","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/validate_fake.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a fake dataset against the original — validate_fake","title":"Validate a fake dataset against the original — validate_fake","text":"Compares classes, NA/blank proportions, simple numeric ranges.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/validate_fake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a fake dataset against the original — validate_fake","text":"","code":"validate_fake(original, fake, tol = 0.15)"},{"path":"https://zobaer09.github.io/FakeDataR/reference/validate_fake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a fake dataset against the original — validate_fake","text":"original data.frame fake data.frame (columns) tol numeric tolerance proportion differences (default 0.15)","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/validate_fake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a fake dataset against the original — validate_fake","text":"data.frame summary column","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/zip_llm_bundle.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip a set of files for easy sharing — zip_llm_bundle","title":"Zip a set of files for easy sharing — zip_llm_bundle","text":"Zip set files easy sharing","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/zip_llm_bundle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip a set of files for easy sharing — zip_llm_bundle","text":"","code":"zip_llm_bundle(files, zipfile)"},{"path":"https://zobaer09.github.io/FakeDataR/reference/zip_llm_bundle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip a set of files for easy sharing — zip_llm_bundle","text":"files Character vector file paths. zipfile Path zip file create.","code":""},{"path":"https://zobaer09.github.io/FakeDataR/reference/zip_llm_bundle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip a set of files for easy sharing — zip_llm_bundle","text":"path created zip file.","code":""},{"path":[]},{"path":"https://zobaer09.github.io/FakeDataR/news/index.html","id":"fakedatar-010","dir":"Changelog","previous_headings":"","what":"FakeDataR 0.1.0","title":"FakeDataR 0.1.0","text":"Initial CRAN submission.","code":""}]
